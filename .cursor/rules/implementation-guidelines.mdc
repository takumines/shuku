---
description: 
globs: 
alwaysApply: true
---
 # 実装ガイドライン

## 概要
このドキュメントは、shukuプロジェクトの実装に関するガイドラインを定義します。
コードの品質、保守性、パフォーマンスを確保するための指針を示します。

## コード品質

### 1. コーディング規約
- Goの標準的なコーディング規約に従う
- `gofmt`を使用してコードをフォーマットする
- 適切なインデントと空行を使用する
- 一貫した命名規則に従う

### 2. ドキュメント
- パッケージレベルのドキュメントを必ず含める
- エクスポートされた型と関数にはドキュメントコメントを付ける
- 複雑なロジックには適切なコメントを付ける
- 変更履歴を明確に記録する

### 3. エラーハンドリング
- エラーは適切に処理し、上位に伝播させる
- エラーメッセージは具体的で有用な情報を含める
- エラー型は適切に定義し、カスタムエラーを活用する
- パニックは適切な場合のみ使用する

## インターフェース設計

### 1. インターフェースの定義
- インターフェースは使用する側のパッケージで定義する
- インターフェースは必要最小限のメソッドのみを含める
- インターフェース名は「er」で終わる（例：`Compressor`）
- インターフェースは小さく保つ

### 2. 実装の配置
- 実装は`internal`パッケージに配置する
- パブリックAPIは`pkg`パッケージに配置する
- テスト可能な設計を心がける
- 依存性注入を活用する

## パフォーマンス最適化

### 1. 並行処理
- 並行処理が必要な場合は`worker`パッケージを利用する
- ゴルーチンのリークを防ぐ
- 適切な同期メカニズムを使用する
- コンテキストを使用してキャンセルを制御する

### 2. メモリ管理
- メモリ使用量を考慮する
- 適切なバッファサイズを選択する
- 不要なメモリ割り当てを避ける
- メモリプールを活用する

### 3. ベンチマーク
- パフォーマンスクリティカルな部分にはベンチマークを追加する
- 定期的にベンチマークを実行する
- パフォーマンスの劣化を監視する
- 最適化の効果を測定する

## テスト

### 1. テストの品質
- テストカバレッジを維持する
- エッジケースを考慮する
- テストは独立して実行できるようにする
- テストは高速に実行できるようにする

### 2. テストの種類
- ユニットテスト
- 統合テスト
- ベンチマーク
- テーブル駆動テスト

### 3. テストの配置
- テストは同じパッケージ内に配置する
- ベンチマークは`tests`ディレクトリに配置する
- テストヘルパーは適切に分離する
- モックは必要最小限に抑える

## メンテナンス

### 1. コードレビュー
- プルリクエストには適切な説明を付ける
- レビューコメントには具体的な改善案を含める
- コードの一貫性を確認する
- テストの追加を確認する

### 2. リファクタリング
- 技術的負債を定期的に解消する
- リファクタリングの影響範囲を明確にする
- テストを維持しながらリファクタリングする
- 変更の理由を記録する

### 3. 依存関係の管理
- 依存関係を定期的に更新する
- セキュリティアップデートを優先する
- 不要な依存関係を削除する
- バージョンの互換性を確認する