---
description: 
globs: 
alwaysApply: true
---
 # パッケージ構成ガイドライン

## 概要
このドキュメントは、shukuプロジェクトのパッケージ構成と設計思想を説明します。
プロジェクトの一貫性を保ち、保守性を高めるために、この構成に従って実装を行うことを推奨します。

## ディレクトリ構造
```
shuku/
├── .github/
│   └── workflows/
│       └── ci.yml                # CI/CDの設定ファイル
│
├── cmd/
│   └── shuku/
│       └── main.go               # CLIツールのエントリーポイント
│
├── internal/                    # 内部実装 (外部からはアクセスできない)
│   ├── compressor/              # 画像圧縮のロジック
│   │   ├── png_compressor.go     # PNGの圧縮処理
│   │   ├── jpeg_compressor.go    # JPEGの圧縮処理
│   │   ├── webp_compressor.go    # WebPの圧縮処理
│   │   └── color_quantizer.go    # K-meansの量子化処理
│   │
│   ├── optimizer/               # 最適化機能（ファイルサイズの最小化）
│   │   ├── zlib_optimizations.go # Zlib圧縮の最適化
│   │   └── huffman.go            # ハフマン符号の最適化処理
│   │
│   └── worker/                  # 並行処理用のワーカープール
│       └── worker_pool.go       # ワーカーのプール処理
│
├── pkg/                         # 外部ユーザー向けのパブリックAPI
│   └── shuku/
│       ├── shuku.go              # 画像圧縮のパブリックAPI
│       └── options.go            # 圧縮のオプション (品質, パレット数など)
│
├── tests/                       # テストコードとベンチマーク
│   └── compressor_test.go       # 画像圧縮のユニットテスト
│
├── examples/                    # サンプルコード (使い方を示す)
│   └── example_compress.go      # サンプルの使い方
│
├── docs/                        # ドキュメントファイル
│   └── usage.md                 # 使い方ガイド (READMEからリンクする)
│
├── Makefile                     # makeコマンドの定義 (make test, make build など)
├── go.mod                       # Goモジュールファイル
└── README.md                    # GitHubのトップページに表示する説明書
```

## パッケージ設計の原則

### 1. パッケージの責務
- `cmd/`: アプリケーションのエントリーポイントのみを含む
- `internal/`: プロジェクト固有の実装を含む（外部からは利用不可）
- `pkg/`: 再利用可能なパブリックAPIを含む
- `tests/`: テストコードとベンチマークを含む
- `examples/`: 使用例を示すサンプルコードを含む

### 2. 依存関係の方向
- `internal`パッケージは`pkg`パッケージに依存してはいけない
- `pkg`パッケージは`internal`パッケージに依存してはいけない
- 循環依存は避ける

### 3. インターフェース設計
- インターフェースは使用する側のパッケージで定義する
- 実装は`internal`パッケージに配置する
- パブリックAPIは`pkg`パッケージに配置する

### 4. テスト
- 各パッケージには対応するテストファイルを含める
- テストは同じパッケージ内に配置する
- ベンチマークは`tests`ディレクトリに配置する

## 実装ガイドライン

### 1. 新規パッケージの追加
- パッケージを追加する前に、このドキュメントを更新する
- 適切なディレクトリに配置する
- 依存関係を考慮する

### 2. コード品質
- Goの標準的なコーディング規約に従う
- 適切なドキュメントコメントを付ける
- エラーハンドリングを適切に行う

### 3. パフォーマンス
- 並行処理が必要な場合は`worker`パッケージを利用する
- メモリ使用量を考慮する
- ベンチマークで性能を確認する

## メンテナンス

### 1. ドキュメントの更新
- パッケージ構成に変更を加えた場合は、このドキュメントを更新する
- 変更の理由と影響範囲を記録する

### 2. 依存関係の管理
- `go.mod`と`go.sum`を定期的に更新する
- 不要な依存関係を削除する

### 3. テストの維持
- テストカバレッジを維持する
- 新機能追加時はテストも追加する
