---
description: 
globs: 
alwaysApply: true
---
# パッケージ構成ガイドライン

## 概要
このドキュメントは、shukuプロジェクトのパッケージ構成と設計思想を説明します。
プロジェクトの一貫性を保ち、保守性を高めるために、この構成に従って実装を行うことを推奨します。
高レベルの設計原則は[design-principles.mdc](./design-principles.mdc)を、
実装の詳細は[implementation-guidelines.mdc](./implementation-guidelines.mdc)を参照してください。

## ディレクトリ構造
```
shuku/
├── .github/
│   └── workflows/
│       └── ci.yml                # CI/CDの設定ファイル
│
├── cmd/
│   └── shuku/
│       └── main.go               # CLIツールのエントリーポイント
│
├── internal/                    # 内部実装 (外部からはアクセスできない)
│   ├── compressor/              # 画像圧縮のロジック
│   │   ├── png_compressor.go     # PNGの圧縮処理
│   │   ├── jpeg_compressor.go    # JPEGの圧縮処理
│   │   ├── webp_compressor.go    # WebPの圧縮処理
│   │   └── color_quantizer.go    # K-meansの量子化処理
│   │
│   ├── optimizer/               # 最適化機能（ファイルサイズの最小化）
│   │   ├── zlib_optimizations.go # Zlib圧縮の最適化
│   │   └── huffman.go            # ハフマン符号の最適化処理
│   │
│   └── worker/                  # 並行処理用のワーカープール
│       └── worker_pool.go       # ワーカーのプール処理
│
├── pkg/                         # 外部ユーザー向けのパブリックAPI
│   └── shuku/
│       ├── shuku.go              # 画像圧縮のパブリックAPI
│       └── options.go            # 圧縮のオプション (品質, パレット数など)
│
├── tests/                       # テストコードとベンチマーク
│   ├── benchmark/               # パフォーマンスベンチマーク
│   │   └── compress_bench.go    # 圧縮のベンチマークテスト
│   │
│   └── testdata/               # テスト用のデータファイル
│       ├── input/               # 入力画像
│       └── expected/            # 期待される出力
│
├── examples/                    # サンプルコード (使い方を示す)
│   ├── basic/                   # 基本的な使用例
│   │   └── main.go              # 基本的な圧縮操作
│   │
│   └── advanced/                # 高度な使用例
│       └── main.go              # カスタム設定での使用
│
├── docs/                        # ドキュメントファイル
│   ├── api.md                   # APIリファレンス
│   └── usage.md                 # 使い方ガイド
│
├── Makefile                     # makeコマンドの定義
├── go.mod                       # Goモジュールファイル
└── README.md                    # プロジェクト概要
```

## ディレクトリの役割と配置規則

### cmd/
- **役割**: アプリケーションのエントリーポイントのみを含む
- **規則**:
  - 各コマンドラインツールは個別のサブディレクトリに配置
  - main.goファイルはシンプルに保ち、ロジックは他パッケージに委譲
  - フラグ処理と基本的な初期化のみを担当
  - 実際のビジネスロジックはpkg/からインポート

### internal/
- **役割**: プロジェクト固有の実装を含む（外部からは利用不可）
- **規則**:
  - 機能ごとにサブパッケージを作成
  - 各パッケージは単一の責任を持つ
  - インターフェースの実装を提供
  - 外部からのアクセスを想定しないコードを配置

#### internal/compressor/
- 画像形式ごとに個別のファイルを作成
- 共通インターフェースを実装
- ファイル名規則: `<形式>_compressor.go`

#### internal/optimizer/
- 最適化アルゴリズムの実装
- 一般的な最適化関数をエクスポート
- 内部状態は最小限に保つ

#### internal/worker/
- 並行処理のためのユーティリティ
- ワーカープールの実装
- タスクキューとワーカー管理

### pkg/
- **役割**: 外部ユーザー向けのパブリックAPIを含む
- **規則**:
  - シンプルで使いやすいAPIを提供
  - 内部実装の詳細を隠蔽
  - 十分なドキュメントを提供
  - バージョン間の互換性を維持

#### pkg/shuku/
- メイン機能のためのAPIを提供
- オプション構造体を定義
- シンプルな関数インターフェースを提供
```go
// 主要な公開APIの例
func Compress(data []byte, options *Options) ([]byte, error)
func CompressFile(inputPath, outputPath string, options *Options) error
func CompressImage(img image.Image, options *Options) (image.Image, error)
```

### tests/
- **役割**: テストコードとベンチマークを含む
- **規則**:
  - ユニットテストは各パッケージ内に配置
  - 統合テストとベンチマークはtestsディレクトリに配置
  - テストデータは`testdata`ディレクトリに配置
  - ベンチマークは`benchmark`サブディレクトリに配置

### examples/
- **役割**: 使用例を示すサンプルコード
- **規則**:
  - 難易度や機能ごとにサブディレクトリに分類
  - 実行可能な完全なサンプルを提供
  - 十分なコメントで説明
  - READMEで使い方を説明

### docs/
- **役割**: プロジェクトのドキュメント
- **規則**:
  - マークダウン形式で記述
  - READMEから各ドキュメントへリンク
  - APIドキュメント、使用例、設計思想を含む

## 依存関係管理

### 1. パッケージ間の依存関係
- 依存方向は次のように制限する:
  ```
  cmd/ → pkg/ → internal/
  ```
- 循環依存は厳密に禁止
- `internal`パッケージ間の依存は最小限に抑える

### 2. 依存関係の図
```
          ┌─────────┐
          │   cmd/  │
          └────┬────┘
               │ 
               ▼ 
          ┌─────────┐       
          │   pkg/  │       
          └────┬────┘       
               │            
               ▼            
┌──────────────────────────┐
│        internal/         │
├──────────┬───────┬───────┤
│compressor│worker │  ...  │
└──────────┴───────┴───────┘
```

### 3. ファイル命名規則
- ファイル名はスネークケース（小文字、アンダースコア区切り）
- テストファイルは`_test.go`サフィックス
- インターフェース定義は`interface.go`または`<機能>_interface.go`
- 実装ファイルは`<機能>_<実装>.go`

例:
```
compressor_interface.go
png_compressor.go
jpeg_compressor.go
worker_pool.go
```

### 4. パッケージ名
- パッケージ名は単数形の短い名前
- ディレクトリ名と一致させる
- 複合語の場合はアンダースコアなしの一語
- 意味のある具体的な名前を使用

例:
```go
package compressor  // 良い例
package compress    // 良い例
package compression // 避けるべき例 (長すぎる)
package comp        // 避けるべき例 (意味が不明確)
```

## ファイル追加時のチェックリスト
新しいファイルを追加する際は、以下を確認してください:

- [ ] 適切なディレクトリに配置されているか
- [ ] 命名規則に従っているか
- [ ] 依存関係は正しい方向か
- [ ] パッケージドキュメントがあるか
- [ ] エクスポートされた型や関数にはドキュメントがあるか