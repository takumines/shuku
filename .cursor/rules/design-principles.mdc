---
description: 
globs: 
alwaysApply: true
---
# 設計方針ガイドライン

## 概要
このドキュメントは、shukuプロジェクトの高レベル設計方針を定義します。
実装の詳細は[implementation-guidelines.mdc](mdc:implementation-guidelines.mdc)を、
パッケージ構造は[package-structure.mdc](mdc:package-structure.mdc)を参照してください。

## 核となる設計原則

### 1. デュアルユース設計
- **CLIツールとしての使用**
  - 直感的なコマンドライン操作: `shuku compress --input input.png --output output.png`
  - コマンドライン処理とビジネスロジックの明確な分離
  - CLIコードは`cmd/shuku`パッケージに限定

- **ライブラリとしての使用**
  - 明確で簡潔なAPI: `result, err := shuku.Compress(input, options)`
  - ドキュメント化された公開関数と型
  - 外部アプリケーションからの直接インポートを前提とした設計
  - 最小限の依存関係

### 2. API設計の原則
- **シンプルで直感的なインターフェース**
  - 必要最小限のパラメータで機能する関数設計
  - options構造体による設定値の管理
  - 合理的なデフォルト値の提供

- **テスト容易性**
  - 外部依存を抽象化したインターフェース
  - モック可能な設計
  - 依存性注入の活用

### 3. 責務の明確な分離
- **内部実装とパブリックAPIの分離**
  - コアロジックと公開インターフェースの分離
  - 適切な抽象化レベルの維持

- **依存関係の最小化と制御**
  - 標準ライブラリを最大限活用
  - サードパーティ依存は必要最小限に
  - 依存関係のバージョン管理を厳格に

## 実装のチェックリスト

新機能やバグ修正を実装する際は、以下のチェックリストに準拠しているか確認してください：

- [ ] パブリックAPIはシンプルで直感的か
- [ ] CLIとライブラリの両方のユースケースをサポートしているか
- [ ] 適切な場所に実装されているか
- [ ] ユニットテストが追加されているか
- [ ] ドキュメントが更新されているか
- [ ] エラーハンドリングが適切か
- [ ] パフォーマンスへの影響は考慮されているか
- [ ] 後方互換性は保たれているか